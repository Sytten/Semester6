from math import gcd


def inverse_multiplicatif(a, n):
    hg = n
    hv = 0
    bg = a
    bv = 1
    while bg != 0:
        t = hg // bg

        tg = bg
        bg = hg - t * bg
        hg = tg

        tv = bv
        bv = hv - t * bv
        hv = tv

    return hv


def pollard(n):
    m = 2
    for i in range(1, 1000):
        m = pow(m, i, n)
        if gcd(n, m-1) != 1:
            return gcd(n, m-1)

print("------Factorisation------")
n = 71632723108922042565754944705405938190163585182073827738737257362015607916694427702407539315166426071602596601779609881448209515844638662529498857637473895727439924386515509746946997356908229763669590304560652312325131017845440601438692992657035378159812499525148161871071841049058092385268270673367938496513
p = pollard(n)
q = n//p
print("P: " + str(p))
print("Q: " + str(q))
if p * q == n:
    print("This is correct")

print("------Trouver d------")
phi = (p-1)*(q-1)
e = 1009
d = inverse_multiplicatif(e, phi)
if d < 0:
    d = phi + d
print("D: " + str(d))


print("------DÃ©coder------")
qdh_enc = 70785482415899901219256855373079758876285923471951840038722877622097582944768442919300478197733262514534911901131859013939654902078384994979880540719293485131574905521151256806126737353610928922434810670654618891838295876181905553857594653764136067479449117470741836721372149447795646290103141292761424726007
pdh_enc = 55044587110698448189468021909149190373421069219506981148292634221985403129928367209713497911359302701069378532959510957622709061077384648566361893749771744973388835727259855002207844685526295296408852878202498675158924213264474587673461598376054133832370354928763624202425050121409987087150490459351809040858
gdh_enc = 43089172300844684958445369204000423742543038862350925279569289644298734265625491619486408239703259462606739540181409010715678916496299388069246398890469779970287613357772582024703107603034996120914490203805569384580718393586094166173301167583379300330660182750028000520221960355249560831414918130647224546308

qdh = pow(qdh_enc, d, n)
print("Q_DH: " + str(qdh))
pdh = pow(pdh_enc, d, n)
print("P_DH: " + str(pdh))
gdh = pow(gdh_enc, d, n)
print("G_DH: " + str(gdh))

print("------Verification------")
verif4 = pow(gdh, qdh, pdh)
print("g^q mod p = " + str(verif4))
